# Simplest workflow to expose a local service via ngrok.

name: Expose Simple Service with ngrok

on:
  # Allows you to manually trigger the workflow from the 'Actions' tab.
  workflow_dispatch:
    inputs:
      # SAW_TARGET_PORT is now expected to be a GitHub repository variable
      tunnel_duration_minutes:
        description: 'How long to keep the ngrok tunnel open (in minutes)'
        required: true
        default: '30' # Adjust this based on your testing needs (max for ngrok actions is usually 360 minutes / 6 hours)
      hostname:
        description: 'Your reserved ngrok static domain (e.g., your-project.ngrok.app)'
        required: true # Set to true if you always want to enforce this domain
        default: 'accepted-optionally-monster.ngrok-free.app' # Your specific static domain

jobs:
  expose_service:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Your Application Setup (customize this section) ---
      # Example for a Node.js application:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and start server
        run: |
          npm install
          npm start & # Runs your app in the background
          # Give your app a moment to start. 
          echo "Waiting for service to start on port ${{ vars.SAW_TARGET_PORT }}..."
          sleep 5 # Give your app a moment to start
      # --- End of Application Setup ---

      - name: Setup ngrok tunnel
        # Uses a popular ngrok action to create the tunnel
        uses: luisboto/ngrok-tunnel-action@v0.1.7.2
        with:
          ngrok_authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}
          port: ${{ vars.SAW_TARGET_PORT }} # Now using the GitHub variable
          timeout: ${{ github.event.inputs.tunnel_duration_minutes }}m # Tunnel duration (e.g., 30 minutes)
          hostname: ${{ github.event.inputs.hostname }} # Your static ngrok domain

      - name: Display ngrok public URL
        # The 'public_url' output from the ngrok action holds the URL
        run: |
          echo "Your service is available at: ${{ steps.setup_ngrok_tunnel.outputs.public_url }}"
          # You can also set this as a step output for other steps/jobs if needed
          # echo "ngrok_public_url=${{ steps.setup_ngrok_tunnel.outputs.public_url }}" >> $GITHUB_OUTPUT
